build --cxxopt='-std=c++20' --host_cxxopt='-std=c++20' --force_pic --verbose_failures
build --cxxopt='-fcoroutines-ts' --host_cxxopt='-fcoroutines-ts'
build --cxxopt='-stdlib=libc++' --host_cxxopt='-stdlib=libc++'
build --linkopt='-stdlib=libc++' --host_linkopt='-stdlib=libc++'

build --action_env=BAZEL_COMPILER=clang
build --action_env=CC=clang
build --action_env=CXX=clang++

build --@capnp-cpp//src/kj:openssl=True --@capnp-cpp//src/kj:zlib=True --@capnp-cpp//src/kj:libdl=True

# Warning options.
build --cxxopt='-Wall' --host_cxxopt='-Wall'
build --cxxopt='-Wextra' --host_cxxopt='-Wextra'
build --cxxopt='-Wno-strict-aliasing' --host_cxxopt='-Wno-strict-aliasing'
build --cxxopt='-Wno-sign-compare' --host_cxxopt='-Wno-sign-compare'
build --cxxopt='-Wno-unused-parameter' --host_cxxopt='-Wno-unused-parameter'
build --cxxopt='-Wno-missing-field-initializers' --host_cxxopt='-Wno-missing-field-initializers'
build --cxxopt='-Wno-ignored-qualifiers' --host_cxxopt='-Wno-ignored-qualifiers'

# Our dependencies (ICU, zlib, etc.) produce a lot of these warnings, so we disable them.
# TODO(cleanup): Can we disable warnings altogether from our dependencies, without disabling them
#   for workerd?
build --cxxopt='-Wno-ambiguous-reversed-operator' --host_cxxopt='-Wno-ambiguous-reversed-operator'

# Speed up sandboxed compilation, particularly on I/O-constrained and non-Linux systems
# https://bazel.build/reference/command-line-reference#flag--reuse_sandbox_directories
build --reuse_sandbox_directories


# optimized LTO build. you'll need a fairly recent clang for this to work
build:thin-lto -c opt
build:thin-lto --cxxopt='-flto=thin'
build:thin-lto --linkopt='-flto=thin'

# Define a config mode which is fastbuild but with basic debug info.
#
# Switching to full debug mode for debugging doesn't really work because debug mode produces
# insanely large binaries.
build:fastdbg -c fastbuild
build:fastdbg --cxxopt='-gline-tables-only' --host_cxxopt='-gline-tables-only'
build:fastdbg --linkopt='-gline-tables-only' --host_linkopt='-gline-tables-only'
build:fastdbg --strip=never

# Additional Rust flags (see https://doc.rust-lang.org/rustc/codegen-options/index.html)
# Need to disable debug-assertions for fastdbg, should be off automatically for opt
build --@rules_rust//:extra_rustc_flags=-C,panic=abort,-C,debug-assertions=n

build:fastdbg --@rules_rust//:extra_rustc_flags=-C,panic=unwind,-C,debug-assertions=y,-C,debuginfo=1

# TODO(later): -C codegen-units=1 improves code size and quality, should be enabled in a future
# release configuration even if lto is off. Similarly, adding -C lto=thin would improve binary size
# a lot (~2.2MB on Linux) â€“ disable it for now due to compile errors and wrong code generation when
# bazel and Rust use different LLVM versions. -C opt-level=s provides a comparatively small size
# improvement, ~35k or ~75k with LTO.
build:thin-lto --@rules_rust//:extra_rustc_flags=-C,panic=abort,-C,codegen-units=1
