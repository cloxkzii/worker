From 58a36ca22df3470497f59b2492e302f157ed69d2 Mon Sep 17 00:00:00 2001
From: Clemens Backes <clemensb@chromium.org>
Date: Tue, 23 Jul 2024 10:51:51 +0200
Subject: [wasm] Remove destructor of LogCodesTask

This is a follow-up to https://crrev.com/c/5718451. The destructor is
still sometimes called very late by the platform, after global teardown.
In this case, the WasmEngine was already deallocated.

It turns out we do not need the destructor at all. We can just schedule
a task when the first code to log is put into the queue, similar to how
we request the interrupt.

R=mliedtke@chromium.org

Bug: 42204620
Change-Id: I4daf644bc157f68ac0b53290cc411109c5a6a5c9
Fixed: 354251542
Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5729763
Reviewed-by: Matthias Liedtke <mliedtke@chromium.org>
Commit-Queue: Clemens Backes <clemensb@chromium.org>
Cr-Commit-Position: refs/heads/main@{#95184}

diff --git a/src/wasm/wasm-engine.cc b/src/wasm/wasm-engine.cc
index c8f3a971bebb123259b6fd78b9c55e10d5b1d5aa..e1f0b899286a61dd4a71b603a8e8fe4b20605b6f 100644
--- a/src/wasm/wasm-engine.cc
+++ b/src/wasm/wasm-engine.cc
@@ -145,10 +145,7 @@ class WasmEngine::LogCodesTask : public CancelableTask {
   explicit LogCodesTask(Isolate* isolate)
       : CancelableTask(isolate), isolate_(isolate) {}
 
-  ~LogCodesTask() override { GetWasmEngine()->DeregisterCodeLoggingTask(this); }
-
   void RunInternal() override {
-    GetWasmEngine()->DeregisterCodeLoggingTask(this);
     GetWasmEngine()->LogOutstandingCodesForIsolate(isolate_);
   }
 
@@ -483,9 +480,6 @@ struct WasmEngine::IsolateInfo {
   // Caches whether code needs to be logged on this isolate.
   bool log_codes;
 
-  // The currently scheduled LogCodesTask.
-  LogCodesTask* log_codes_task = nullptr;
-
   // Maps script ID to vector of code objects that still need to be logged, and
   // the respective source URL.
   struct CodeToLogPerScript {
@@ -1368,10 +1362,13 @@ void WasmEngine::LogCode(base::Vector<WasmCode*> code_vec) {
       // weak handle is cleared already, we also don't need to log any more.
       if (script_it == info->scripts.end()) continue;
 
-      // If this is the first code to log in that isolate, request an interrupt
-      // to log the newly added code as soon as possible.
+      // If there is no code scheduled to be logged already in that isolate,
+      // then schedule a new task and also set an interrupt to log the newly
+      // added code as soon as possible.
       if (info->code_to_log.empty()) {
         isolate->stack_guard()->RequestLogWasmCode();
+        to_schedule.emplace_back(info->foreground_task_runner,
+                                 std::make_unique<LogCodesTask>(isolate));
       }
 
       WeakScriptHandle& weak_script_handle = script_it->second;
@@ -1387,22 +1384,6 @@ void WasmEngine::LogCode(base::Vector<WasmCode*> code_vec) {
         DCHECK_EQ(native_module, code->native_module());
         code->IncRef();
       }
-
-      if (info->log_codes_task == nullptr) {
-        auto new_task = std::make_unique<LogCodesTask>(isolate);
-        info->log_codes_task = new_task.get();
-        // Store the LogCodeTasks to post them outside the WasmEngine::mutex_.
-        // Posting the task in the mutex can cause the following deadlock (only
-        // in d8): When d8 shuts down, it sets a terminate to the task runner.
-        // When the terminate flag in the taskrunner is set, all newly posted
-        // tasks get destroyed immediately. When the LogCodesTask gets
-        // destroyed, it takes the WasmEngine::mutex_ lock to deregister itself
-        // from the IsolateInfo. Therefore, as the LogCodesTask may get
-        // destroyed immediately when it gets posted, it cannot get posted when
-        // the WasmEngine::mutex_ lock is held.
-        to_schedule.emplace_back(info->foreground_task_runner,
-                                 std::move(new_task));
-      }
     }
   }
   for (auto& [runner, task] : to_schedule) {
@@ -1450,18 +1431,6 @@ void WasmEngine::LogOutstandingCodesForIsolate(Isolate* isolate) {
   }
 }
 
-void WasmEngine::DeregisterCodeLoggingTask(LogCodesTask* task) {
-  base::MutexGuard engine_mutex_guard(&mutex_);
-  Isolate* isolate = task->isolate_;
-  auto it = isolates_.find(isolate);
-  // If the isolate died already, the IsolateInfo can not be found.
-  if (it == isolates_.end()) return;
-  IsolateInfo* info = it->second.get();
-  // If another task is already scheduled (or we already deregistered), return.
-  if (info->log_codes_task != task) return;
-  info->log_codes_task = nullptr;
-}
-
 std::shared_ptr<NativeModule> WasmEngine::NewNativeModule(
     Isolate* isolate, WasmEnabledFeatures enabled,
     CompileTimeImports compile_imports,
@@ -1909,7 +1878,7 @@ void WasmEngine::PotentiallyFinishCurrentGC() {
 
 size_t WasmEngine::EstimateCurrentMemoryConsumption() const {
   UPDATE_WHEN_CLASS_CHANGES(WasmEngine, 760);
-  UPDATE_WHEN_CLASS_CHANGES(IsolateInfo, 192);
+  UPDATE_WHEN_CLASS_CHANGES(IsolateInfo, 184);
   UPDATE_WHEN_CLASS_CHANGES(NativeModuleInfo, 144);
   UPDATE_WHEN_CLASS_CHANGES(CurrentGCInfo, 96);
   size_t result = sizeof(WasmEngine);
diff --git a/src/wasm/wasm-engine.h b/src/wasm/wasm-engine.h
index 4d9fce22e05b24ce1345d3df19257aa39e85c70b..5e353b8474859b03711a85400d913b5ade2efda9 100644
--- a/src/wasm/wasm-engine.h
+++ b/src/wasm/wasm-engine.h
@@ -298,10 +298,6 @@ class V8_EXPORT_PRIVATE WasmEngine {
   // outstanding code objects (added via {LogCode}).
   void LogOutstandingCodesForIsolate(Isolate*);
 
-  // Code logging is done via a separate task per isolate. This deregisters a
-  // task after execution (or destruction because of isolate shutdown).
-  void DeregisterCodeLoggingTask(LogCodesTask*);
-
   // Create a new NativeModule. The caller is responsible for its
   // lifetime. The native module will be given some memory for code,
   // which will be page size aligned. The size of the initial memory
